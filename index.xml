<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Cloud</title>
    <link>https://rawsanj.dev/</link>
      <atom:link href="https://rawsanj.dev/index.xml" rel="self" type="application/rss+xml" />
    <description>Coding Cloud</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2024. Sanjay Rawat</copyright><lastBuildDate>Sat, 04 May 2019 17:49:33 +0000</lastBuildDate>
    <image>
      <url>https://rawsanj.dev/media/icon_hu40be7a442f4132e79fbcdc152b49bfa5_12137_512x512_fill_lanczos_center_3.png</url>
      <title>Coding Cloud</title>
      <link>https://rawsanj.dev/</link>
    </image>
    
    <item>
      <title>Aws Lambda Filter Chain</title>
      <link>https://rawsanj.dev/project/aws-lambda-filter-chain/</link>
      <pubDate>Sat, 04 May 2019 17:49:33 +0000</pubDate>
      <guid>https://rawsanj.dev/project/aws-lambda-filter-chain/</guid>
      <description>&lt;p&gt;AWS Lambda Filter Chain provides a way to add filters similar to &lt;code&gt;javax.servlet.Filter&lt;/code&gt; to the AWS Lambda Functions handling requests from API Gateway&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;h4 id=&#34;clone-the-github-repository&#34;&gt;Clone the Github repository&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/aws-lambda-filter-chain.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;build-library-and-sample-api-gateway-lambda-function&#34;&gt;Build library and sample API Gateway Lambda Function&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ./build.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;build--run-sample-api-gateway-lambda-function-locally&#34;&gt;Build &amp;amp; Run sample API Gateway Lambda Function locally&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ./build.sh runLocally
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;
Install &lt;a href=&#34;https://github.com/awslabs/aws-sam-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS SAM CLI&lt;/a&gt; and &lt;a href=&#34;https://hub.docker.com/search/?type=edition&amp;amp;offering=community&amp;amp;operating_system=linux%2Cwindows&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; to run aws lambda functions locally.&lt;/p&gt;
&lt;h4 id=&#34;test-the-sample-lambda-function-locally&#34;&gt;Test the sample lambda function locally&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ // Get All User
$ curl  http://127.0.0.1:3000/user
$ // Post User
$ curl -X POST http://localhost:3000/user -H &#39;Accept: application/json&#39; -H &#39;Content-Type: application/json&#39; -d &#39;{&amp;quot;userName&amp;quot;: &amp;quot;john&amp;quot;,&amp;quot;fullName&amp;quot;: &amp;quot;John Doe&amp;quot;,&amp;quot;age&amp;quot;: 29,&amp;quot;company&amp;quot;: &amp;quot;Example&amp;quot;}&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spring Redis Websocket</title>
      <link>https://rawsanj.dev/project/spring-redis-websocket/</link>
      <pubDate>Sun, 17 Mar 2019 19:39:30 +0000</pubDate>
      <guid>https://rawsanj.dev/project/spring-redis-websocket/</guid>
      <description>&lt;h2 id=&#34;multi-instance-reactive-chat-app-using-spring-boot-webflux-and-redis-pubsub&#34;&gt;Multi-instance Reactive Chat App using Spring Boot WebFlux and Redis Pub/Sub&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Scalable Java 11 Spring Boot WebFlux Chat Application to demonstrate use of Reactive Redis &lt;a href=&#34;https://redis.io/topics/pubsub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pub/Sub&lt;/a&gt; using
Reactive &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-websockethandler&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebSocket Handler&lt;/a&gt;, without using any external Message Broker like RabbitMQ to sync messages between different
instances.&lt;/p&gt;
&lt;p&gt;Both JVM based application and &lt;a href=&#34;https://www.graalvm.org/reference-manual/native-image&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Graal Native Image&lt;/a&gt; is supported.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://heroku.com/deploy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.png#floatleft&#34; alt=&#34;Deploy to Heroku&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The older non-reactive servlet based spring-redis-websocket application can be found in below links:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RawSanj/spring-redis-websocket/tree/spring-boot-web-2.3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring-Boot 2.3: Java-11 version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RawSanj/spring-redis-websocket/tree/spring-boot-1.5.x&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring-Boot 1.5: Java-8 version&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The reactive spring-boot 2.4.6 based spring-redis-websocket application can be found in below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RawSanj/spring-redis-websocket/tree/spring-boot-webflux-graal-native-2.4.6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring-Boot 2.4.6: Java-11 Reactive JVM &amp;amp; Graal Native version&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;deploy-to-play-with-docker&#34;&gt;Deploy to Play-with-Docker&lt;/h3&gt;
&lt;p&gt;Ctrl + Click this button to deploy multiple instances of the spring-redis-websocket load balanced by NGINX:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://labs.play-with-docker.com/?stack=https://raw.githubusercontent.com/RawSanj/spring-redis-websocket/master/src/main/docker/docker-compose.yml#&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;deploy-to-pwd.png#floatleft&#34; alt=&#34;Deploy to PWD&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;installation-and-configuration&#34;&gt;Installation and Configuration&lt;/h3&gt;
&lt;h5 id=&#34;pre-requisite-for-java-image&#34;&gt;Pre-requisite for Java Image:&lt;/h5&gt;
&lt;p&gt;Install and run &lt;a href=&#34;https://redis.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis&lt;/a&gt; locally or on Docker.&lt;/p&gt;
&lt;p&gt;To run Redis in Docker:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run -d -p 6379:6379 -e REDIS_PASSWORD=SuperSecretRedisPassword bitnami/redis:6.0.9
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;pre-requisite-for-graal-native-image&#34;&gt;Pre-requisite for Graal Native Image:&lt;/h5&gt;
&lt;p&gt;This application uses Spring Data Redis APIs which doesn&amp;rsquo;t have default Graal hints/config and graal-native image fails to run with errors.&lt;/p&gt;
&lt;p&gt;Hence, this application is configured to use GraalVM native image tracing agent allows intercepting reflection, resources or proxy usage on the JVM by running simple Integration Tests which requires Redis.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To run integration test which uses &lt;a href=&#34;https://www.testcontainers.org/supported_docker_environment&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis TestContainers&lt;/a&gt; so &lt;a href=&#34;https://www.docker.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; should be configured properly to run &lt;a href=&#34;https://www.testcontainers.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Testcontainers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You also need to install &lt;a href=&#34;https://github.com/graalvm/graalvm-ce-builds/releases/tag/vm-21.0.0.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GraalVM JDK&lt;/a&gt; and &lt;a href=&#34;https://www.graalvm.org/reference-manual/native-image&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;native-image&lt;/a&gt; component:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sdk install java 21.1.0.r11-grl       # Using [SDKMAN](https://sdkman.io/jdks) install GraalVM distribution of JDK

$ gu install native-image 		# Then install [native-image](https://www.graalvm.org/reference-manual/native-image) component
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;clone-repo&#34;&gt;Clone repo:&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/spring-redis-websocket.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;build-and-run-the-application&#34;&gt;Build and Run the application:&lt;/h4&gt;
&lt;p&gt;Build and run the &lt;strong&gt;spring-redis-websocket&lt;/strong&gt; application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd spring-redis-websocket

$ mvn clean package

$ mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;build-graal-native-image-of-the-application&#34;&gt;Build Graal Native Image of the application:&lt;/h4&gt;
&lt;p&gt;Build and run the &lt;strong&gt;spring-redis-websocket&lt;/strong&gt; native image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd spring-redis-websocket

$ mvn -Pnative clean package -DskipNativeImage=false

$ target/spring-redis-websocket # run the executable binary
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Above steps are applicable for Linux only and creates linux executable binary. To create Windows executable there are few additional set-ups required, follow this &lt;a href=&#34;https://www.graalvm.org/docs/getting-started/windows&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Steps&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;run-in-docker&#34;&gt;Run in Docker&lt;/h3&gt;
&lt;h4 id=&#34;build-and-run-the-spring-redis-websocket-locally-in-docker&#34;&gt;Build and run the &lt;em&gt;spring-redis-websocket&lt;/em&gt; locally in Docker:&lt;/h4&gt;
&lt;p&gt;Build the JAR file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn clean package
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build Docker image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn clean spring-boot:build-image
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build Graal Native Docker image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn -Pnative clean spring-boot:build-image
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run docker image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run -d -p 8080:8080 rawsanj/spring-redis-websocket:2.5.2-webflux # JVM based Docker Image

$ docker run -d -p 8080:8080 rawsanj/spring-redis-websocket:2.5.2-native  # Graal Native Image based Docker Image
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;run-multiple-instances-using-docker-compose-locally&#34;&gt;Run multiple instances using docker-compose locally&lt;/h4&gt;
&lt;p&gt;Run multiple instances of &lt;em&gt;spring-redis-websocket&lt;/em&gt; locally load balanced via Ngnix connected to redis container in
Docker:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd src/main/docker
$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;or-try-play-with-docker-to-quickly-setup-docker-and-run-in-browser&#34;&gt;Or try &lt;a href=&#34;https://labs.play-with-docker.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Play with Docker&lt;/a&gt; to quickly setup Docker and run in browser:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Click Create Instance to quickly setup Docker host.&lt;/li&gt;
&lt;li&gt;Install git by running:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ apk add git --no-cache
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Clone the repository:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/spring-redis-websocket.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Run multiple instances of &lt;em&gt;spring-redis-websocket&lt;/em&gt;:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd spring-redis-websocket/src/main/docker
$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;run-in-kubernetes&#34;&gt;Run in Kubernetes&lt;/h3&gt;
&lt;h4 id=&#34;assuming-you-have-a-kubernetes-cluster-up-and-running-locally&#34;&gt;Assuming you have a Kubernetes Cluster up and running locally:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubectl apply -f src/main/k8s
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;or-try-play-with-kubernetes-to-quickly-setup-a-k8s-cluster&#34;&gt;Or try &lt;a href=&#34;https://labs.play-with-k8s.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Play with Kubernetes&lt;/a&gt; to quickly setup a K8S cluster:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Follow the instructions to create Kuberenetes cluster.&lt;/li&gt;
&lt;li&gt;Install git by running:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ yum install git -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Clone the repository:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/spring-redis-websocket.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Run multiple instances of &lt;em&gt;spring-redis-websocket&lt;/em&gt; load balanced by native Kubernetes Service. All instances
connected to a single &lt;a href=&#34;https://redis.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis&lt;/a&gt; pod.
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd spring-redis-websocket
$ kubectl apply -f src/main/k8s
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;tech&#34;&gt;Tech&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;spring-redis-websocket&lt;/strong&gt; uses a number of open source projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://projects.spring.io/spring-boot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Boot&lt;/a&gt; - An opinionated framework for building production-ready Spring applications. It favors convention over
configuration and is designed to get you up and running as quickly as possible.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projects.spring.io/spring-data-redis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Data Redis&lt;/a&gt; - Spring Data Redis provides easy configuration and access to Redis from Spring applications.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.graalvm.org/reference-manual/native-image&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Graal Native Image&lt;/a&gt; - Native Image is a technology to ahead-of-time compile Java code to a standalone executable,
called a native image.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://redis.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis&lt;/a&gt; - Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and
message broker.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.testcontainers.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Testcontainers&lt;/a&gt; - Testcontainers is a Java library that supports JUnit tests, providing lightweight, throwaway
instances of common databases or anything else that can run in a Docker container.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getbootstrap.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bootstrap&lt;/a&gt; - Bootstrap is an open source toolkit for developing with HTML, CSS, and JS. Custom Bootstrap theme
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bootswatch.com/sketchy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bootswatch Sketch&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; - Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NGINX&lt;/a&gt; - NGINX is High Performance Load Balancer, Web Server, &amp;amp; Reverse Proxy.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; - Kubernetes is an open-source system for automating deployment, scaling, and management of containerized
applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Apache License 2.0&lt;/p&gt;
&lt;p&gt;Copyright (c) 2022 Sanjay Rawat&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spring Cloud Task as K8s Cronjob</title>
      <link>https://rawsanj.dev/project/spring-cloud-task-as-k8s-cronjob/</link>
      <pubDate>Sun, 16 Sep 2018 19:36:28 +0000</pubDate>
      <guid>https://rawsanj.dev/project/spring-cloud-task-as-k8s-cronjob/</guid>
      <description>&lt;h2 id=&#34;spring-cloud-task-application-running-as-cronjob-in-kubernetes&#34;&gt;&lt;a href=&#34;https://spring.io/projects/spring-cloud-task&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Cloud Task&lt;/a&gt; Application running as &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CronJob&lt;/a&gt; in Kubernetes&lt;/h2&gt;
&lt;p&gt;A Spring Cloud Task Application which runs as CronJob in Kubernetes every minute to fetch BitCoin rates, saves the rates in Mysql and notifies Users if/when the threshold is reached.&lt;/p&gt;
&lt;h3 id=&#34;installation-and-configuration&#34;&gt;Installation and Configuration&lt;/h3&gt;
&lt;h5 id=&#34;pre-requisite&#34;&gt;Pre-requisite:&lt;/h5&gt;
&lt;p&gt;MySql Server is up and running and application is configured the MySql credentials&lt;/p&gt;
&lt;h5 id=&#34;clone-repo&#34;&gt;Clone repo:&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/spring-cloud-task-as-k8s-cronjob.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;build-and-run-the-applications&#34;&gt;Build and Run the applications:&lt;/h4&gt;
&lt;p&gt;Build and run the &lt;strong&gt;spring-cloud-task-as-k8s-cronjob&lt;/strong&gt; application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd spring-cloud-task-as-k8s-cronjob

$ mvn clean package

$ mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;run-in-kubernetes&#34;&gt;Run in Kubernetes&lt;/h3&gt;
&lt;h4 id=&#34;assuming-you-have-a-kubernetes-cluster-up-and-running-and-kubectl-is-configured-run&#34;&gt;Assuming you have a Kubernetes Cluster up and running and kubectl is configured, run:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubectl apply -f src/main/k8s
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;or-try-play-with-kubernetes-to-quickly-setup-a-k8s-cluster&#34;&gt;Or try &lt;a href=&#34;https://labs.play-with-k8s.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Play with Kubernetes&lt;/a&gt; to quickly setup a K8S cluster:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Follow the instructions to create Kubernetes cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install git by running:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ yum install git -y&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the repository:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ git clone https://github.com/RawSanj/spring-cloud-task-as-k8s-cronjob.git&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update Kubernetes Secrets under &lt;code&gt;src/main/k8s/cronjob.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;em&gt;spring-cloud-task-as-k8s-cronjob&lt;/em&gt; as Kubernetes CronJob. CronJob Pods connects to MySql server and stores Bitcoin rates every minute.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ cd spring-cloud-task-as-k8s-cronjob&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ kubectl apply -f src/main/k8s&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone and deploy the UI Application - &lt;a href=&#34;https://github.com/RawSanj/spring-cronjob-currency&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;spring-cronjob-currency&lt;/a&gt; by running &lt;code&gt;kubectl apply -f src/main/k8s&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Aws Service Broker</title>
      <link>https://rawsanj.dev/project/aws-service-broker/</link>
      <pubDate>Sat, 02 Jun 2018 18:34:34 +0000</pubDate>
      <guid>https://rawsanj.dev/project/aws-service-broker/</guid>
      <description>&lt;p&gt;&lt;strong&gt;aws-service-broker&lt;/strong&gt; is &lt;a href=&#34;https://www.openservicebrokerapi.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open Service Broker&lt;/a&gt; compatible API server that provisions managed services in AWS.&lt;/p&gt;
&lt;h3 id=&#34;supported-aws-services&#34;&gt;Supported AWS Services&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/rds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amazon Relational Database Service (RDS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/s3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amazon Simple Sorage Service (S3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;build-test-and-run&#34;&gt;Build, Test and Run&lt;/h3&gt;
&lt;h4 id=&#34;setup&#34;&gt;Setup&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/aws-service-broker.git

$ cd aws-service-broker
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;configuration&#34;&gt;Configuration:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Create a new IAM user with Programmatic access (i.e. enable access key ID and secret access key for the AWS API) and attach following policies: AmazonRDSFullAccess, AmazonS3FullAccess and IAMFullAccess.&lt;/li&gt;
&lt;li&gt;Add the above noted AWS Access key, Secret key and export them as environment variable (AWS_ACCESS_KEY, AWS_SECRET_KEY and AWS_DEFAULT_REGION).&lt;/li&gt;
&lt;li&gt;Also Export Application Secret keys as environment variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ // Export AWS Keys
$ export AWS_ACCESS_KEY=[YOUR_AWS_ACCESS_KEY]
$ export AWS_SECRET_KEY=[YOUR_AWS_SECRET_KEY]
$ export AWS_DEFAULT_REGION=[YOUR_AWS_DEFAULT_REGION]

$ // Export Application Secret Keys
$ export BROKER_APP_ADMIN_USERNAME=admin
$ export BROKER_APP_ADMIN_PASSWORD=p@$$w0rd
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;build-and-test&#34;&gt;Build and Test&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn clean package
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;run-the-application&#34;&gt;Run the application:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ java -jar aws-service-broker-[version]-exec.jar
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Aws S3 File System</title>
      <link>https://rawsanj.dev/project/aws-s3-file-system/</link>
      <pubDate>Sat, 28 Apr 2018 19:19:02 +0000</pubDate>
      <guid>https://rawsanj.dev/project/aws-s3-file-system/</guid>
      <description>&lt;h3 id=&#34;aws-s3-as-file-system-application---spring-cloud-aws---spring--boot---thymeleaf&#34;&gt;AWS S3 as File System Application - Spring Cloud AWS - Spring  Boot - Thymeleaf&lt;/h3&gt;
&lt;p&gt;This is simple Spring Boot Application to upload/delete/search files in AWS S3 bucket.
It uses Thymeleaf view tech and Bootstrap for responsive UI.&lt;/p&gt;
&lt;p&gt;It also provides a REST api for creating Single Page Application using frameworks like Angular or React.&lt;/p&gt;
&lt;h3 id=&#34;tech&#34;&gt;Tech&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;aws-s3-file-system&lt;/strong&gt; uses a number of open source projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://projects.spring.io/spring-boot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Boot&lt;/a&gt; - An opinionated framework for building production-ready Spring applications. It favors convention over configuration and is designed to get you up and running as quickly as possible.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.spring.io/spring-cloud-aws&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Cloud AWS&lt;/a&gt; - Spring Cloud for Amazon Web Services, eases the integration with hosted Amazon Web Services. It offers a convenient way to interact with AWS provided services using well-known Spring idioms and APIs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thymeleaf.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Thymeleaf&lt;/a&gt; - Thymeleaf is a modern server-side Java template engine for both web and standalone environments.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bootswatch.com/paper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bootswatch&lt;/a&gt; - A Boostrap theme for great UI boilerplate for modern web apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;installation-and-configuration&#34;&gt;Installation and Configuration&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/aws-s3-file-system.git

$ cd aws-s3-file-system
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a S3 bucket in Amazon Web Services.&lt;/li&gt;
&lt;li&gt;Create an IAM user with Programmatic access (i.e. enable access key ID and secret access key for the AWS API) and attach only AWS AmazonS3FullAccess policy.&lt;/li&gt;
&lt;li&gt;Add the above noted AWS Access key, Secret key and S3 Bucket name in &lt;code&gt;/src/main/resources/application.properties&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Run the application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn clean package

$ mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;run-in-docker&#34;&gt;Run in Docker&lt;/h3&gt;
&lt;h4 id=&#34;build-and-run-locally-in-docker&#34;&gt;Build and run locally in Docker:&lt;/h4&gt;
&lt;p&gt;Build the WAR file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn clean package
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build docker image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn docker:build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run docker image by passing credentials in Environment variables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run -d -p 8080:8080 \
$ -e cloud.aws.credentials.accessKey=ACCESS_KEY \
$ -e cloud.aws.credentials.secretKey=SECRET_KEY \
$ -e cloud.aws.region.static=REGION \
$ -e aws.bucket.name=BUCKET_NAME \
$ rawsanj/aws-s3-file-system
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or Run docker image by updating the env.list file with AWS Credentials:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run -d -p 8080:8080 --env-file env.list rawsanj/aws-s3-file-system
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;run-on-cloud&#34;&gt;Run on Cloud:&lt;/h4&gt;
&lt;p&gt;Try &lt;a href=&#34;http://play-with-docker.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://play-with-docker.com&lt;/a&gt; for running docker on browser without any local setup.&lt;/p&gt;
&lt;p&gt;Run the docker image available in Docker Hub:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run -d -p 8080:8080 \
$ -e cloud.aws.credentials.accessKey=ACCESS_KEY \
$ -e cloud.aws.credentials.secretKey=SECRET_KEY \
$ -e cloud.aws.region.static=REGION \
$ -e aws.bucket.name=BUCKET_NAME \
$ rawsanj/aws-s3-file-system
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Boot Kubeless</title>
      <link>https://rawsanj.dev/project/boot-kubeless/</link>
      <pubDate>Fri, 02 Feb 2018 18:54:05 +0000</pubDate>
      <guid>https://rawsanj.dev/project/boot-kubeless/</guid>
      <description>&lt;h2 id=&#34;spring-boot-project-for-kubelesshttpskubelessio-custom-runtimehttpsgithubcomkubelesskubelessblobmasterdocsruntimesmdcustom-runtime-alpha&#34;&gt;Spring Boot project for &lt;a href=&#34;https://kubeless.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubeless&lt;/a&gt; Custom &lt;a href=&#34;https://github.com/kubeless/kubeless/blob/master/docs/runtimes.md#custom-runtime-alpha&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Runtime&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A simple Spring Boot Application to demonstrate how to build and run Custom Java Runtime on &lt;a href=&#34;https://kubeless.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubeless&lt;/a&gt; for HTTP and Kafka Triggers.&lt;/p&gt;
&lt;p&gt;It has two applications:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;boot-kubeless-http&lt;/strong&gt;: A simple Spring Boot app for Kubeless HTTP trigger. It provides a &lt;strong&gt;GET&lt;/strong&gt; and &lt;strong&gt;POST&lt;/strong&gt; endpoint to add/list simple domain entity to demonstrate the use of various Spring projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;boot-kubeless-kafka&lt;/strong&gt;: A simple Spring Boot app as Kafka Consumer for Kubeless Topic/Kafka trigger.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;tech&#34;&gt;Tech&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;boot-kubeless&lt;/strong&gt; uses a number of open source projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://projects.spring.io/spring-boot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Boot&lt;/a&gt; - An opinionated framework for building production-ready Spring applications. It favors convention over configuration and is designed to get you up and running as quickly as possible.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubeless.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubeless&lt;/a&gt; - The Kubernetes Native Serverless Framework.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projects.spring.io/spring-data-jpa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Data JPA&lt;/a&gt; - Spring Data JPA, part of the larger Spring Data family, makes it easy to easily implement JPA based repositories.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Boot Actuator&lt;/a&gt; - Actuator endpoints allow you to monitor and interact with your application.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/projects/spring-kafka&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring for Kafka&lt;/a&gt; - The Spring for Apache Kafka project applies core Spring concepts to the development of Kafka-based messaging solutions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;installation-and-configuration&#34;&gt;Installation and Configuration&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/boot-kubeless.git

$ cd boot-kubeless
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;build-and-run-the-applications&#34;&gt;Build and Run the applications:&lt;/h4&gt;
&lt;p&gt;Build and run the &lt;strong&gt;boot-kubeless-http&lt;/strong&gt; application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd boot-kubeless-http

$ mvn clean package

$ mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build and run the &lt;strong&gt;boot-kubeless-kafka&lt;/strong&gt; application:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Download and Install &lt;a href=&#34;https://kafka.apache.org/quickstart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kafka&lt;/a&gt;. Set the Kafka Server Address and Topic name in &lt;code&gt;application.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd boot-kubeless-kafka

$ mvn clean package

$ mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;run-in-docker&#34;&gt;Run in Docker&lt;/h3&gt;
&lt;h4 id=&#34;build-and-run-the-boot-kubeless-http-locally-in-docker&#34;&gt;Build and run the &lt;em&gt;boot-kubeless-http&lt;/em&gt; locally in Docker:&lt;/h4&gt;
&lt;p&gt;Build the JAR file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd boot-kubeless-http

$ mvn clean package
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build docker image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn docker:build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run docker image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run -d -p 8080:8080 \
$ rawsanj/boot-kubeless-http
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;build-and-run-the-boot-kubeless-kafka-locally-in-docker&#34;&gt;Build and run the &lt;em&gt;boot-kubeless-kafka&lt;/em&gt; locally in Docker:&lt;/h4&gt;
&lt;p&gt;Build the JAR file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd boot-kubeless-kafka
$ mvn clean package
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build docker image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn docker:build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You would need to run Kafka in Docker. Try this &lt;a href=&#34;https://hub.docker.com/r/spotify/kafka&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kafka docker image&lt;/a&gt;.
Run docker image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run -d -p 8080:8080 \
$ rawsanj/boot-kubeless-kafka --link &amp;lt;Kafka_Container&amp;gt;:alias
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;deploy-on-kubernetes-as-faas-using-kubeless-cli&#34;&gt;Deploy on Kubernetes as FaaS using kubeless cli&lt;/h3&gt;
&lt;h4 id=&#34;setup-and-install-kubeless&#34;&gt;Setup and Install Kubeless.&lt;/h4&gt;
&lt;p&gt;Follow the Steps &lt;a href=&#34;https://github.com/kubeless/kubeless#installation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;deploy-the-boot-kubeless-http-as-kubeless-function-with-http-trigger&#34;&gt;Deploy the &lt;em&gt;boot-kubeless-http&lt;/em&gt; as Kubeless Function with HTTP Trigger&lt;/h4&gt;
&lt;p&gt;Deploy the Spring Boot app &lt;em&gt;boot-kubeless-http&lt;/em&gt; as a Function using docker image available in Docker Hub:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubeless function deploy --runtime-image rawsanj/boot-kubeless-http --trigger-http boot-kubeless-http
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;test-the-function&#34;&gt;Test the function:&lt;/h4&gt;
&lt;p&gt;Calls the &lt;strong&gt;GET&lt;/strong&gt; method of Spring Boot App&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubeless function call boot-kubeless-http
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calls the &lt;strong&gt;POST&lt;/strong&gt; method of Spring Boot App&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubeless function call boot-kubeless-http --data &#39;{&amp;quot;language&amp;quot;:&amp;quot;Go&amp;quot;,&amp;quot;rate&amp;quot;:1}&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;deploy-the-boot-kubeless-kafka-as-kubeless-function-with-kafkatopic-trigger&#34;&gt;Deploy the &lt;em&gt;boot-kubeless-kafka&lt;/em&gt; as Kubeless Function with Kafka/Topic Trigger&lt;/h4&gt;
&lt;p&gt;Before deploying the function, lets create kafka topic:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubeless topic create boot-topic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Deploy the Spring Boot app &lt;em&gt;boot-kubeless-kafka&lt;/em&gt; as a Function using docker image available in Docker Hub:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubeless function deploy boot-kubeless-kafka --runtime-image rawsanj/boot-kubeless-kafka --trigger-topic boot-topic --env KUBELESS_KAFKA_SVC=kafka --env  KUBELESS_KAFKA_NAMESPACE=kubeless
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you have your own Kafka Cluster running on K8S, update the namespace and service name in the environment variables above.&lt;/p&gt;
&lt;h4 id=&#34;test-the-function-1&#34;&gt;Test the function:&lt;/h4&gt;
&lt;p&gt;Publish message onto the Kafka topic&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubeless topic publish --topic boot-topic --data &amp;quot;Hello From Kafka&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ssh into &lt;strong&gt;boot-kubeless-kafka&lt;/strong&gt; Pods to check the Messages getting consumed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubectl get pods | grep boot-kubeless-kafka   // Note the Pod name.

$ kubectl logs boot-kubeless-kafka-68b.... // Above pod name.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;you-can-also-test-the-function-from-kubeless-uihttpsgithubcomkubelesskubeless-ui&#34;&gt;You can also test the Function from &lt;a href=&#34;https://github.com/kubeless/kubeless-ui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubeless UI&lt;/a&gt;.&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Spring Twitter Stream</title>
      <link>https://rawsanj.dev/project/spring-twitter-stream/</link>
      <pubDate>Wed, 03 Jan 2018 18:21:52 +0000</pubDate>
      <guid>https://rawsanj.dev/project/spring-twitter-stream/</guid>
      <description>&lt;p&gt;Spring Boot - Spring Social Twitter - D3.Js webapp for Streaming Live #HashTags and source location of Tweets.&lt;/p&gt;
&lt;h3 id=&#34;demo&#34;&gt;Demo&lt;/h3&gt;
&lt;p&gt;Live Demo @ &lt;a href=&#34;https://twitter-stream-cloud.herokuapp.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Heroku&lt;/a&gt; PaaS.&lt;/p&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;h4 id=&#34;clone-the-github-repository&#34;&gt;Clone the Github repository&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/Spring-Twitter-Stream.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;twitter-app-and-configuration&#34;&gt;Twitter App and Configuration&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Login to &lt;a href=&#34;https://apps.twitter.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://apps.twitter.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a New Application and note down the &lt;em&gt;Consumer Key, Consumer Secret, Access Token and Access Token Secret&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Edit the &lt;code&gt;/src/main/resources/application.properties&lt;/code&gt; and add above noted keys.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;run-the-application&#34;&gt;Run the application&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then navigate to &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:8080&lt;/a&gt; in your browser.&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-cloud-foundry&#34;&gt;Deploy to Cloud Foundry&lt;/h3&gt;
&lt;h4 id=&#34;package-the-application-creates-spring-twitter-stream-010war-file&#34;&gt;Package the application (creates spring-twitter-stream-0.1.0.war file)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn clean package
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;pre-requisite&#34;&gt;Pre-requisite:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Account @ &lt;a href=&#34;http://run.pivotal.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://run.pivotal.io&lt;/a&gt;. $87 Credit Free Account.&lt;/li&gt;
&lt;li&gt;cf cli is installed - &lt;a href=&#34;http://docs.cloudfoundry.org/cf-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://docs.cloudfoundry.org/cf-cli&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;login-to-pivotal-cloud-foundry&#34;&gt;Login to Pivotal Cloud Foundry&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cf login -a https://api.run.pivotal.io
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;deploy-the-application&#34;&gt;Deploy the application&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cf push spring-twitter-app -p target/spring-twitter-stream-0.1.0.war --random-route
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;deploy-to-heroku&#34;&gt;Deploy to Heroku&lt;/h3&gt;
&lt;h4 id=&#34;package-the-application-creates-spring-twitter-stream-010war-file-1&#34;&gt;Package the application (creates spring-twitter-stream-0.1.0.war file)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn clean package
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;pre-requisite-1&#34;&gt;Pre-requisite:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Account @ &lt;a href=&#34;https://www.heroku.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.heroku.com&lt;/a&gt;. Free Account.&lt;/li&gt;
&lt;li&gt;heroku cli is installed - &lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://devcenter.heroku.com/articles/heroku-cli&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;login-to-heroku&#34;&gt;Login to Heroku&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ heroku login
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;install-heroku-cli-deploy-plugin&#34;&gt;Install Heroku cli deploy plugin&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ heroku plugins:install heroku-cli-deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;create-the-application-in-heroku&#34;&gt;Create the application in Heroku&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ heroku create spring-tweets-app
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;deploy-the-application-1&#34;&gt;Deploy the application&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ heroku war:deploy target/spring-twitter-stream-0.1.0.war --app spring-tweets-app
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Java Mail Clients</title>
      <link>https://rawsanj.dev/project/java-mail-clients/</link>
      <pubDate>Wed, 18 Oct 2017 18:49:22 +0000</pubDate>
      <guid>https://rawsanj.dev/project/java-mail-clients/</guid>
      <description>&lt;h4 id=&#34;this-demo-is-created-to-test-the-java-mail-clients-to-configure-mailservice-is-jhipster-application-as-suggested-in-jhipster-tip---configuring-email-with---gmail&#34;&gt;This demo is created to test the Java Mail Clients, to configure MailService is &lt;a href=&#34;http://www.jhipster.tech&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jHipster&lt;/a&gt; application as suggested in jHipster Tip - &lt;a href=&#34;http://www.jhipster.tech/tips/011_tip_configuring_email_in_jhipster.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Configuring Email with - Gmail&lt;/a&gt;&lt;/h4&gt;
&lt;h3 id=&#34;note-for-gmail&#34;&gt;Note (for Gmail)&lt;/h3&gt;
&lt;p&gt;You must allow your Gmail Account to access less secure apps.&lt;/p&gt;
&lt;p&gt;Login to Gmail and visit &lt;a href=&#34;https://www.google.com/settings/security/lesssecureapps&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt; to Turn On Access for less secure apps.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://support.google.com/accounts/answer/6010255&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;More Info here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/java-mail-clients.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;updated-version-added-support-for-attachments&#34;&gt;Updated Version (added support for Attachments):&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Update &lt;code&gt;ConfigConsts.java&lt;/code&gt; file with &lt;em&gt;to&lt;/em&gt; and &lt;em&gt;from&lt;/em&gt; Email address and password.&lt;/li&gt;
&lt;li&gt;Select the SMTP Server (GMAIL, YAHOO, OUTLOOK or ZOHO) and update the File path where the attachments are located.&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;SendEmailWithAttachments&lt;/code&gt; class as Java Application.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;older-version&#34;&gt;Older Version:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Change the &lt;code&gt;sendToAddress&lt;/code&gt;, &lt;code&gt;sendFromAddress&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; in the respective E-Mail client app and run as Java Application.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;p&gt;Refer below links for API and SMTP settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/java/javamail/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaMail API&lt;/a&gt; - JavaMail : version-1.5.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.google.com/a/answer/176600?hl=en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GMail SMTP&lt;/a&gt; - Gmail SMTP Settings.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.outlook-apps.com/outlook-com-pop-settings/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Outlook SMTP&lt;/a&gt; - Outlook SMTP Settings.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.serversmtp.com/en/smtp-yahoo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yahoo SMTP&lt;/a&gt; - Yahoo SMTP Settings.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zoho.com/mail/help/zoho-smtp.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Zoho SMTP&lt;/a&gt; - Zoho SMTP Settings.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker Deep Dive</title>
      <link>https://rawsanj.dev/talk/docker-deep-dive/</link>
      <pubDate>Mon, 14 Aug 2017 12:30:25 +0000</pubDate>
      <guid>https://rawsanj.dev/talk/docker-deep-dive/</guid>
      <description>&lt;h3 id=&#34;docker-deep-dive-for-java-developers&#34;&gt;Docker Deep Dive for Java Developers&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Deep dive into Docker and Linux Containers&lt;/li&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;li&gt;Run Docker Containers&lt;/li&gt;
&lt;li&gt;Run Tomcat inside Docker Container&lt;/li&gt;
&lt;li&gt;Deploy Spring Boot App in Docker&lt;/li&gt;
&lt;li&gt;Container Linking and Stateful containers&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://play-with-docker.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Play with Docker&lt;/a&gt; online&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Intro to Kubernetes</title>
      <link>https://rawsanj.dev/talk/intro-to-kubernetes/</link>
      <pubDate>Tue, 14 Mar 2017 12:30:25 +0000</pubDate>
      <guid>https://rawsanj.dev/talk/intro-to-kubernetes/</guid>
      <description>&lt;h3 id=&#34;kubernetes-for-java-developers&#34;&gt;Kubernetes for Java Developers&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Quick Intro to Docker&lt;/li&gt;
&lt;li&gt;Intro to Kubernetes Concepts&lt;/li&gt;
&lt;li&gt;Fabric8 - PaaS for K8s&lt;/li&gt;
&lt;li&gt;CI/CD in K8s using Fabric8&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://labs.play-with-k8s.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Play with Kubernetes&lt;/a&gt; online&lt;/li&gt;
&lt;li&gt;Shout-out to &lt;a href=&#34;https://stackpoint.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stackpoint.io&lt;/a&gt; for making super easy to deploy Kubernetes back in 2016&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Spring Rest Batch</title>
      <link>https://rawsanj.dev/project/spring-rest-batch/</link>
      <pubDate>Wed, 07 Dec 2016 19:13:11 +0000</pubDate>
      <guid>https://rawsanj.dev/project/spring-rest-batch/</guid>
      <description>&lt;h3 id=&#34;spring-boot---batch-project-to-read-movies-from-themoviedbhttpsdevelopersthemoviedborg3-rest-api&#34;&gt;Spring Boot - Batch project to read Movies from &lt;a href=&#34;https://developers.themoviedb.org/3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TheMovieDB&lt;/a&gt; REST API.&lt;/h3&gt;
&lt;h3 id=&#34;tech&#34;&gt;Tech&lt;/h3&gt;
&lt;p&gt;SpringRestBatch uses a number of open source projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://projects.spring.io/spring-boot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Boot&lt;/a&gt; - Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://projects.spring.io/spring-data-jpa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Data JPA&lt;/a&gt; - Spring Data JPA, part of the larger Spring Data family, makes it easy to easily implement JPA based repositories.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://projects.spring.io/spring-batch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Batch&lt;/a&gt; - A lightweight, comprehensive batch framework designed to enable the development of robust batch applications vital for the daily operations of enterprise systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Clone this repository by running below command:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/SpringRestBatch.git
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;Register @ &lt;a href=&#34;https://www.themoviedb.org/documentation/api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.themoviedb.org/documentation/api&lt;/a&gt; and get your API key. Update the &lt;code&gt;REST_API_URL_WITH_KEY&lt;/code&gt; key in &lt;code&gt;src/main/resources/application.properties&lt;/code&gt; file with your obtained key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start your local PostgreSQL database, configure the database properties in &lt;code&gt;src/main/resources/application.properties&lt;/code&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run this application using embedded Tomcat and PostgreSql DB Server:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rawsanj.dev/admin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://rawsanj.dev/admin/</guid>
      <description></description>
    </item>
    
    <item>
      <title>AWS Lambda Deep Dive</title>
      <link>https://rawsanj.dev/slides/aws-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://rawsanj.dev/slides/aws-lambda/</guid>
      <description>
&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Amazon_Lambda_architecture_logo.svg/1024px-Amazon_Lambda_architecture_logo.svg.png&#34;
  
      
      data-background-repeat=&#34;repeat&#34;
  
      
      data-background-size=&#34;1024px&#34;
  &gt;

&lt;h1 id=&#34;aws-lambda&#34;&gt;AWS Lambda&lt;/h1&gt;
&lt;h1 id=&#34;deep-dive&#34;&gt;Deep Dive&lt;/h1&gt;
&lt;h3 id=&#34;documentationhttpsdocsawsamazoncomlambdalatestdgwelcomehtml&#34;&gt;&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/welcome.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Hi there, I&amp;rsquo;m Sanjay ð!&lt;/p&gt;
&lt;a href=&#34;https://www.linkedin.com/in/rawsanj&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;LinkedIn Badge&#34; src=&#34;https://img.shields.io/badge/-/in/rawsanj-0A66C2?style=for-the-badge&amp;logo=Linkedin&amp;logoColor=white&amp;link=https://www.linkedin.com/in/rawsanj&#34; /&gt;
&lt;/a&gt;
&lt;a href=&#34;https://rawsanj.dev&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;Website Badge&#34; src=&#34;https://img.shields.io/badge/-rawsanj.dev-4CAF50?style=for-the-badge&amp;logo=curl&amp;logoColor=white&amp;link=https://rawsanj.dev&#34; /&gt;
&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/Raw_Sanj&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;Twitter Badge&#34; src=&#34;https://img.shields.io/static/v1?label=&amp;message=@Raw_Sanj&amp;color=E8EAEC&amp;style=for-the-badge&amp;logo=Twitter&amp;logoColor=1DA1F2&amp;link=https://twitter.com/Raw_Sanj&#34;/&gt;
&lt;/a&gt;
&lt;a href=&#34;https://github.com/RawSanj&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;Github Badge&#34; src=&#34;https://img.shields.io/badge/-/RawSanj-181717?style=for-the-badge&amp;logo=Github&amp;logoColor=white&amp;link=https://github.com/RawSanj&#34; /&gt;
&lt;/a&gt;
&lt;a href=&#34;https://stackoverflow.com/users/5702727/sanjay-rawat?tab=profile&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;Stack Overflow&#34; src=&#34;https://img.shields.io/badge/Stack%20Overflow-F58025?style=for-the-badge&amp;logo=Stack%20Overflow&amp;logoColor=white&amp;link=https://stackoverflow.com/users/5702727/sanjay-rawat?tab=profile&#34; /&gt;
&lt;/a&gt;
&lt;h3 id=&#34;about-me&#34;&gt;About me&lt;/h3&gt;
&lt;ul style=&#34;font-size: 22px&#34;&gt;
  &lt;li&gt;ð­ &lt;strong&gt;Working:&lt;/strong&gt; Cloud Developer working on Reactive Spring Boot, Kafka, Cassandra, Microservices, AWS.&lt;/li&gt;
  &lt;li&gt;ð¥ï¸ &lt;strong&gt;Interests:&lt;/strong&gt; I love building cool software and systems using Spring Boot, Kotlin and Go&lt;/li&gt;
  &lt;li&gt;ð± &lt;strong&gt;Learning:&lt;/strong&gt; Go | Scala | Design Patterns &lt;/li&gt;
  &lt;li&gt;ð¬ &lt;strong&gt;Ask me about:&lt;/strong&gt; Java | Reactive Spring | AWS&lt;/li&gt;
  &lt;li&gt;ð§âð¤âð§ &lt;strong&gt;Collaboration:&lt;/strong&gt; I&#39;m looking to collaborate on several projects over here, please check out my GitHub repos&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h4 id=&#34;languages-frameworks-and-platforms&#34;&gt;Languages, Frameworks and Platforms&lt;/h4&gt;
&lt;img alt=&#34;Java&#34; src=&#34;https://img.shields.io/badge/Java-f8981d?style=for-the-badge&amp;logo=openjdk&amp;logoColor=5382a1&#34; /&gt;
&lt;img alt=&#34;Spring&#34; src=&#34;https://img.shields.io/badge/Spring-6DB33F?style=for-the-badge&amp;logo=spring&amp;logoColor=white&#34; /&gt;
&lt;img alt=&#34;Kotlin&#34; src=&#34;https://img.shields.io/badge/Kotlin-4d7ddd?&amp;style=for-the-badge&amp;logo=kotlin&amp;logoColor=&#34; /&gt;
&lt;img alt=&#34;Project Reactor&#34; src=&#34;https://img.shields.io/badge/Project_Reactor-6db33f?style=for-the-badge&amp;logo=ReactiveX&amp;logoColor=white&#34; /&gt;
&lt;img alt=&#34;Kafka&#34; src=&#34;https://img.shields.io/badge/-Kafka-727272?style=for-the-badge&amp;logo=apachekafka&amp;logoColor&#34; /&gt;
&lt;img alt=&#34;Cassandra&#34; src=&#34;https://img.shields.io/badge/Cassandra-1287B1?style=for-the-badge&amp;logo=apache%20cassandra&amp;logoColor=d4effc&#34; /&gt;
&lt;img alt=&#34;AWS&#34; src=&#34;https://img.shields.io/badge/AWS-232F3E?style=for-the-badge&amp;logo=amazon-aws&amp;logoColor=ff9a00&#34; /&gt;
&lt;img alt=&#34;Kubernetes&#34; src=&#34;https://img.shields.io/badge/kubernetes-%23326ce5.svg?style=for-the-badge&amp;logo=kubernetes&amp;logoColor=white&#34; /&gt;
&lt;hr&gt;
&lt;h3 id=&#34;what-is-aws-lambda-function&#34;&gt;What is AWS Lambda Function&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A Compute Service to run code without Provisioning or Managing Servers&lt;/li&gt;
&lt;li&gt;Uses Containerization tech called &lt;a href=&#34;https://firecracker-microvm.github.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Firecracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handles Server &amp;amp; OS Maintenance, Provisioning, Auto-Scaling, Logging&lt;/li&gt;
&lt;li&gt;Code in one of the Languages supported by &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lambda Runtimes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;lambda-concepts&#34;&gt;Lambda Concepts&lt;/h3&gt;
&lt;ul style=&#34;font-size: 35px&#34;&gt;
  &lt;li&gt;&lt;u&gt;Function&lt;/u&gt;: a resource invoked to run your code&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Trigger&lt;/u&gt;: a resource/config that invokes a Lambda Function&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Event&lt;/u&gt;: a JSON-formatted data for a Lambda Function to Process&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Event Source Mapping&lt;/u&gt;: a resource that reads items from a Stream/Queue &amp;amp; invokes a function&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Execution Env&lt;/u&gt;: provides a secure and isolated Runtime Environment for your Lambda function&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Runtime&lt;/u&gt;: provides a lang-specific Environment that runs in an Execution Environment&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;what-is-lambda-runtimes&#34;&gt;What is Lambda Runtimes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Runtime provides a lang-specific env that runs in an execution env&lt;/li&gt;
&lt;li&gt;It relays invocation Events, Context, &amp;amp; Responses between Lambda &amp;amp; the Function&lt;/li&gt;
&lt;li&gt;Use AWS provided Lambda Runtimes or Build your own by implementing &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Runtime API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;execution-environment--runtime&#34;&gt;Execution Environment &amp;amp; Runtime&lt;/h3&gt;
&lt;img src=&#34;https://docs.aws.amazon.com/images/lambda/latest/dg/images/telemetry-api-concept-diagram.png&#34; alt=&#34;Lambda Execution Environment&#34; width=&#34;80%&#34;/&gt;
&lt;img src=&#34;https://docs.aws.amazon.com/images/lambda/latest/dg/images/Overview-Invoke-with-Error.png&#34; alt=&#34;Lambda Execution Environment&#34; width=&#34;120%&#34;/&gt;
&lt;hr&gt;
&lt;h3 id=&#34;supported-lambda-runtimes&#34;&gt;Supported Lambda Runtimes&lt;/h3&gt;
&lt;table style=&#34;font-size: 30px&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
    &lt;th style=&#34;text-align:right&#34;&gt;&lt;/th&gt;
    &lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
    &lt;td style=&#34;text-align:right&#34;&gt;Node.js&lt;/td&gt;
    &lt;td style=&#34;text-align:left&#34;&gt;v18, v16, v14 &amp;amp; v12*&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td style=&#34;text-align:right&#34;&gt;Python&lt;/td&gt;
    &lt;td style=&#34;text-align:left&#34;&gt;v3.9, v3.8, v3.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td style=&#34;text-align:right&#34;&gt;Java&lt;/td&gt;
    &lt;td style=&#34;text-align:left&#34;&gt;v8, v11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td style=&#34;text-align:right&#34;&gt;C#&lt;/td&gt;
    &lt;td style=&#34;text-align:left&#34;&gt;.NET v5, v6   &amp;amp; .NET Core v3.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td style=&#34;text-align:right&#34;&gt;Go&lt;/td&gt;
    &lt;td style=&#34;text-align:left&#34;&gt;v1.x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td style=&#34;text-align:right&#34;&gt;Ruby&lt;/td&gt;
    &lt;td style=&#34;text-align:left&#34;&gt;v2.7*&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td style=&#34;text-align:right&#34;&gt;&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Custom Runtime&lt;/a&gt;&lt;/td&gt;
    &lt;td style=&#34;text-align:left&#34;&gt;- Based on Amazon Linux&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
      &lt;tr&gt;
      &lt;th style=&#34;text-align:right&#34;&gt;&lt;/th&gt;
      &lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/micronaut-projects/micronaut-aws/blob/master/function-aws-custom-runtime/src/main/java/io/micronaut/function/aws/runtime/AbstractMicronautLambdaRuntime.java#L347&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Micronaut Custom Runtime Implementation Example&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;lambda-function-java&#34;&gt;Lambda Function Java&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MsgHandler implements RequestHandler&amp;lt;String, String&amp;gt; {
    public String handleRequest(String input, Context ctx) {
        context.getLogger().log(&amp;quot;Input: &amp;quot; + input);
        return &amp;quot;Hello World - &amp;quot; + input;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class StreamHandler implements RequestStreamHandler {
    public void handleRequest(InputStream is, OutputStream os, Context ctx) {
        String input = IOUtils.toString(is, &amp;quot;UTF-8&amp;quot;);
        os.write((&amp;quot;Hello World - &amp;quot; + input).getBytes());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class NoInterfaceHandler {
    public String customHandle(String input, Context context) {
        context.getLogger().log(&amp;quot;Input: &amp;quot; + input);
        return &amp;quot;Hello World - &amp;quot; + input;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Automatically manages the underlying Compute Resources&lt;/li&gt;
&lt;li&gt;Concurrency and Scaling controls&lt;/li&gt;
&lt;li&gt;Pay Per Request Execution is millis&lt;/li&gt;
&lt;li&gt;Multiple Event Sources: API-GW, SQS, S3, DynamoDB, etc.&lt;/li&gt;
&lt;li&gt;Functions defined as Container Images&lt;/li&gt;
&lt;li&gt;Lambda Extensions&lt;/li&gt;
&lt;li&gt;Execute inside Private Subnets inside a VPC&lt;/li&gt;
&lt;li&gt;File Systems Access + EFS&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;limitationshttpsdocsawsamazoncomlambdalatestdggettingstarted-limitshtml&#34;&gt;&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Limitations&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Memory: 128 MB to 10,240 MB&lt;/li&gt;
&lt;li&gt;No Direct Way to assign CPU: 1,769 MB memory is equivalent of one vCPU&lt;/li&gt;
&lt;li&gt;Function Timeouts: 15 minutes&lt;/li&gt;
&lt;li&gt;Invocation Payload: 6 MB (sync) &amp;amp; 256 KB (async)&lt;/li&gt;
&lt;li&gt;File descriptors: 1024&lt;/li&gt;
&lt;li&gt;Execution processes/threads: 1024&lt;/li&gt;
&lt;li&gt;No Async Processing Allowed: Lambda Instance Freezes once invocation is completed&lt;/li&gt;
&lt;li&gt;1 Lambda Instance serves only 1 request at time&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;other-compute-options&#34;&gt;Other Compute Options&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Services&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Comparison with Lambda&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;AWS EC2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Not Serverless, More RAM/CPU/Storage, Always ON&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;AWS EKS&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Managed Container Platform on EC2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Fargate&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Serverless Container Platform on EC2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Beanstalk&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AWS Container based PaaS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;GCP Cloud RUN&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Based on &lt;a href=&#34;https://knative.dev/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OSS Knative&lt;/a&gt; - Charged for Runtime only&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>AWS SQS &#43; Lambda Integration</title>
      <link>https://rawsanj.dev/slides/aws-sqs-lambda-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://rawsanj.dev/slides/aws-sqs-lambda-integration/</guid>
      <description>
&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./SQS_Lambda.svg&#34;
  
      
      data-background-repeat=&#34;none&#34;
  
      
      data-background-size=&#34;1500px&#34;
  &gt;

&lt;h1 style=&#34;color: #114a5b !important;&#34; id=&#34;aws-sqs&#34;&gt;AWS SQS&lt;/h1&gt;
&lt;h1 style=&#34;color: #114a5b !important;&#34; id=&#34;lambda-integration&#34;&gt;Lambda Integration&lt;/h1&gt;
&lt;h2 style=&#34;color: #114a5b !important;&#34; id=&#34;with-resiliency-patterns&#34;&gt;with Resiliency Patterns&lt;/h2&gt;
&lt;h3 id=&#34;documentationhttpsdocsawsamazoncomawssimplequeueservicelatestsqsdeveloperguidewelcomehtml&#34;&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/welcome.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Hi there, I&amp;rsquo;m Sanjay ð!&lt;/p&gt;
&lt;a href=&#34;https://www.linkedin.com/in/rawsanj&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;LinkedIn Badge&#34; src=&#34;https://img.shields.io/badge/-/in/rawsanj-0A66C2?style=for-the-badge&amp;logo=Linkedin&amp;logoColor=white&amp;link=https://www.linkedin.com/in/rawsanj&#34; /&gt;
&lt;/a&gt;
&lt;a href=&#34;https://rawsanj.dev&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;Website Badge&#34; src=&#34;https://img.shields.io/badge/-rawsanj.dev-4CAF50?style=for-the-badge&amp;logo=curl&amp;logoColor=white&amp;link=https://rawsanj.dev&#34; /&gt;
&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/Raw_Sanj&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;Twitter Badge&#34; src=&#34;https://img.shields.io/static/v1?label=&amp;message=@Raw_Sanj&amp;color=E8EAEC&amp;style=for-the-badge&amp;logo=Twitter&amp;logoColor=1DA1F2&amp;link=https://twitter.com/Raw_Sanj&#34;/&gt;
&lt;/a&gt;
&lt;a href=&#34;https://github.com/RawSanj&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;Github Badge&#34; src=&#34;https://img.shields.io/badge/-/RawSanj-181717?style=for-the-badge&amp;logo=Github&amp;logoColor=white&amp;link=https://github.com/RawSanj&#34; /&gt;
&lt;/a&gt;
&lt;a href=&#34;https://stackoverflow.com/users/5702727/sanjay-rawat?tab=profile&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;Stack Overflow&#34; src=&#34;https://img.shields.io/badge/Stack%20Overflow-F58025?style=for-the-badge&amp;logo=Stack%20Overflow&amp;logoColor=white&amp;link=https://stackoverflow.com/users/5702727/sanjay-rawat?tab=profile&#34; /&gt;
&lt;/a&gt;
&lt;h3 id=&#34;about-me&#34;&gt;About me&lt;/h3&gt;
&lt;ul style=&#34;font-size: 22px&#34;&gt;
  &lt;li&gt;ð­ &lt;strong&gt;Working:&lt;/strong&gt; Cloud Developer working on Reactive Spring Boot, Kafka, Cassandra, Microservices, AWS.&lt;/li&gt;
  &lt;li&gt;ð¥ï¸ &lt;strong&gt;Interests:&lt;/strong&gt; I love building cool software and systems using Spring Boot, Kotlin and Go&lt;/li&gt;
  &lt;li&gt;ð± &lt;strong&gt;Learning:&lt;/strong&gt; Go | Scala | Design Patterns &lt;/li&gt;
  &lt;li&gt;ð¬ &lt;strong&gt;Ask me about:&lt;/strong&gt; Java | Reactive Spring | AWS&lt;/li&gt;
  &lt;li&gt;ð§âð¤âð§ &lt;strong&gt;Collaboration:&lt;/strong&gt; I&#39;m looking to collaborate on several projects over here, please check out my GitHub repos&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h4 id=&#34;languages-frameworks-and-platforms&#34;&gt;Languages, Frameworks and Platforms&lt;/h4&gt;
&lt;img alt=&#34;Java&#34; src=&#34;https://img.shields.io/badge/Java-f8981d?style=for-the-badge&amp;logo=openjdk&amp;logoColor=5382a1&#34; /&gt;
&lt;img alt=&#34;Spring&#34; src=&#34;https://img.shields.io/badge/Spring-6DB33F?style=for-the-badge&amp;logo=spring&amp;logoColor=white&#34; /&gt;
&lt;img alt=&#34;Kotlin&#34; src=&#34;https://img.shields.io/badge/Kotlin-4d7ddd?&amp;style=for-the-badge&amp;logo=kotlin&amp;logoColor=&#34; /&gt;
&lt;img alt=&#34;Project Reactor&#34; src=&#34;https://img.shields.io/badge/Project_Reactor-6db33f?style=for-the-badge&amp;logo=ReactiveX&amp;logoColor=white&#34; /&gt;
&lt;img alt=&#34;Kafka&#34; src=&#34;https://img.shields.io/badge/-Kafka-727272?style=for-the-badge&amp;logo=apachekafka&amp;logoColor&#34; /&gt;
&lt;img alt=&#34;Cassandra&#34; src=&#34;https://img.shields.io/badge/Cassandra-1287B1?style=for-the-badge&amp;logo=apache%20cassandra&amp;logoColor=d4effc&#34; /&gt;
&lt;img alt=&#34;AWS&#34; src=&#34;https://img.shields.io/badge/AWS-232F3E?style=for-the-badge&amp;logo=amazon-aws&amp;logoColor=ff9a00&#34; /&gt;
&lt;img alt=&#34;Kubernetes&#34; src=&#34;https://img.shields.io/badge/kubernetes-%23326ce5.svg?style=for-the-badge&amp;logo=kubernetes&amp;logoColor=white&#34; /&gt;
&lt;hr&gt;
&lt;h3 id=&#34;what-is-aws-sqs&#34;&gt;What is AWS SQS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SQS offers a Secure, Durable, and Highly Available Hosted Queue&lt;/li&gt;
&lt;li&gt;Used to integrate and decouple distributed software systems and components&lt;/li&gt;
&lt;li&gt;Standard queues support &lt;a href=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/standard-queues.html#standard-queues-at-least-once-delivery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;at-least-once&lt;/a&gt; message delivery, and FIFO queues support &lt;a href=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;exactly-once&lt;/a&gt; message processing and &lt;a href=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;high-throughput&lt;/a&gt; mode&lt;/li&gt;
&lt;li&gt;Offers &lt;a href=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dead Letter Queues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;sqs-concepts-wrt-lambda&#34;&gt;SQS Concepts w.r.t Lambda&lt;/h3&gt;
&lt;ul style=&#34;font-size: 30px&#34;&gt;
  &lt;li&gt;&lt;u&gt;Queue Types&lt;/u&gt;: Standard and FIFO&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Visibility timeout&lt;/u&gt;: wait time after which message is visible again if not deleted after processing&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Message retention period&lt;/u&gt;: 1 minute to 14 days (defaults to 4 days)&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Delivery delay&lt;/u&gt;: 0 seconds to 15 minutes&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;SQS Event Source Mapping&lt;/u&gt;: Lambda Service reads items from a SQS &amp;amp; invokes Lambda Function&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Enable trigger&lt;/u&gt;: Enable or disable SQS-Lambda Integration&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Batch size&lt;/u&gt;: number of records to send to the function in each batch. Standard: 10,000(max). FIFO: 10(max)&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Batch window&lt;/u&gt;: wait time (in second) to gather records before invoking the function, applicable for Standard&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;message-lifecycle&#34;&gt;Message Lifecycle&lt;/h3&gt;
&lt;img src=&#34;https://docs.aws.amazon.com/images/AWSSimpleQueueService/latest/SQSDeveloperGuide/images/sqs-message-lifecycle-diagram.png&#34; alt=&#34;sqs-message-lifecycle&#34; height=&#34;70%&#34;/&gt;
&lt;hr&gt;
&lt;h3 id=&#34;sqs-visibility-timeout&#34;&gt;SQS Visibility Timeout&lt;/h3&gt;
&lt;img src=&#34;https://docs.aws.amazon.com/images/AWSSimpleQueueService/latest/SQSDeveloperGuide/images/sqs-visibility-timeout-diagram.png&#34; alt=&#34;SQS Visibility Timeout&#34; height=&#34;50%&#34; width=&#34;50%&#34;/&gt;
&lt;ul style=&#34;font-size: 25px&#34;&gt;
  &lt;li&gt;To avoid message loss, it&#39;s consumers responsibility to delete the message after processing&lt;/li&gt;
  &lt;li&gt;Message remains in queue after it is received, but SQS sets a visibility timeout to prevent other consumer from processing same message again&lt;/li&gt;
  &lt;li&gt;Default visibility timeout is 30 seconds. Can be set between 0 seconds to 12 hours&lt;/li&gt;
  &lt;li&gt;Can be set a Queue level or dynamically changed per message&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Caution&lt;/b&gt;: When using FIFO make sure to use Message GroupId which provides high distribution to avoid blocking processing due to error&lt;/li&gt;
&lt;/ul&gt;
&lt;ul style=&#34;font-size: 20px&#34;&gt;
  &lt;strong style=&#34;font-size: 20px&#34;&gt;Note: &lt;/strong&gt;
  &lt;li&gt;For Standard queues, the visibility timeout isn&#39;t a guarantee against receiving a message twice. &lt;/li&gt;
  &lt;li&gt;FIFO queues allow the producer or consumer to attempt multiple retries: producers can retry send using deduplicationId and consumers doesn&#39;t receive messages for same message groupId unless deleted or timed-out&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;in-flight-messages--scaling&#34;&gt;In-Flight Messages &amp;amp; Scaling&lt;/h3&gt;
&lt;ul style=&#34;font-size: 25px&#34;&gt;
  &lt;li&gt;Messages that are received by the consumer but not deleted are known as In-Flight messages&lt;/li&gt;
  &lt;li&gt;For Standard queues: there can be a maximum of approximately 120,000 in flight messages&lt;/li&gt;
  &lt;li&gt;For FIFO queues: there can be a maximum of 20,000 in flight messages&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;border-top: 3px solid #476672; padding: 4px&#34;&gt;&lt;/div&gt;
&lt;ul style=&#34;font-size: 25px&#34;&gt;
  &lt;li&gt;&lt;b&gt;Standard Queues&lt;/b&gt;: Lambda uses &lt;a href=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-short-and-long-polling.html&#34; target=&#34;_blank&#34;&gt;long polling&lt;/a&gt; &amp; reads up to 5 batches to invoke your function.&lt;/li&gt;
  &lt;li&gt;Lambda increases the number of processes that reads batches by up to 60 more instances per minute. The max no. of batches that an Event Source Mapping can process simultaneously is 1,000.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;FIFO queues&lt;/b&gt;: Lambda sends messages to your function in the order that it receives them and ensures that messages in the same group are delivered to Lambda in order.&lt;/li&gt;
  &lt;li&gt;Lambda sorts the messages into groups and sends only one batch at a time for a group.&lt;/li&gt;
  &lt;li&gt;Your function can scale in concurrency to the number of active message groups.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;sqs-message-event-in-lambda-function---standard&#34;&gt;SQS Message Event in Lambda Function - Standard&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;Records&amp;quot;: [
    {
      &amp;quot;messageId&amp;quot;: &amp;quot;059f36b4-87a3-44ab-83d2-661975830a7d&amp;quot;,
      &amp;quot;receiptHandle&amp;quot;: &amp;quot;AQEBwJnKyrHigUMZj6rYigCgxlaS3SLy0a...&amp;quot;,
      &amp;quot;body&amp;quot;: &amp;quot;Test message.&amp;quot;,
      &amp;quot;attributes&amp;quot;: {
        &amp;quot;ApproximateReceiveCount&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;SentTimestamp&amp;quot;: &amp;quot;1545082649183&amp;quot;,
        &amp;quot;SenderId&amp;quot;: &amp;quot;AIDAIENQZJOLO23YVJ4VO&amp;quot;,
        &amp;quot;ApproximateFirstReceiveTimestamp&amp;quot;: &amp;quot;1545082649185&amp;quot;
      },
      &amp;quot;messageAttributes&amp;quot;: {},
      &amp;quot;md5OfBody&amp;quot;: &amp;quot;e4e68fb7bd0e697a0ae8f1bb342846b3&amp;quot;,
      &amp;quot;eventSource&amp;quot;: &amp;quot;aws:sqs&amp;quot;,
      &amp;quot;eventSourceARN&amp;quot;: &amp;quot;arn:aws:sqs:us-east-2:123456789012:my-queue&amp;quot;,
      &amp;quot;awsRegion&amp;quot;: &amp;quot;us-east-2&amp;quot;
    },
    ...
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;sqs-message-event-in-lambda-function---fifo&#34;&gt;SQS Message Event in Lambda Function - FIFO&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;Records&amp;quot;: [
    {
      &amp;quot;messageId&amp;quot;: &amp;quot;11d6ee51-4cc7-4302-9e22-7cd8afdaadf5&amp;quot;,
      &amp;quot;receiptHandle&amp;quot;: &amp;quot;AQEBBX8nesZEXmkhsmZeyIE8iQAMig7qw...&amp;quot;,
      &amp;quot;body&amp;quot;: &amp;quot;Test message.&amp;quot;,
      &amp;quot;attributes&amp;quot;: {
        &amp;quot;ApproximateReceiveCount&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;SentTimestamp&amp;quot;: &amp;quot;1573251510774&amp;quot;,
        &amp;quot;SequenceNumber&amp;quot;: &amp;quot;18849496460467696128&amp;quot;,
        &amp;quot;MessageGroupId&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;SenderId&amp;quot;: &amp;quot;AIDAIO23YVJENQZJOL4VO&amp;quot;,
        &amp;quot;MessageDeduplicationId&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;ApproximateFirstReceiveTimestamp&amp;quot;: &amp;quot;1573251510774&amp;quot;
      },
      &amp;quot;messageAttributes&amp;quot;: {},
      &amp;quot;md5OfBody&amp;quot;: &amp;quot;e4e68fb7bd0e697a0ae8f1bb342846b3&amp;quot;,
      &amp;quot;eventSource&amp;quot;: &amp;quot;aws:sqs&amp;quot;,
      &amp;quot;eventSourceARN&amp;quot;: &amp;quot;arn:aws:sqs:us-east-2:123456789012:fifo.fifo&amp;quot;,
      &amp;quot;awsRegion&amp;quot;: &amp;quot;us-east-2&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;sqs-resiliency-pattern-with-lambda&#34;&gt;SQS Resiliency Pattern with Lambda&lt;/h3&gt;
&lt;div style=&#34;font-size: 25px&#34;&gt;Enable Batch Error Reporting by running: &lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;aws lambda update-event-source-mapping \
    --uuid &amp;quot;a1b2c3d4-5678-90ab-cdef-123401&amp;quot; \
    --function-response-types &amp;quot;ReportBatchItemFailures&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;div style=&#34;font-size: 25px&#34;&gt;Update your Lambda Function code to collect messageId of failed messages: &lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;batchItemFailures&amp;quot;: [
    {
      &amp;quot;itemIdentifier&amp;quot;: &amp;quot;message-id-1&amp;quot;
    },
    {
      &amp;quot;itemIdentifier&amp;quot;: &amp;quot;message-id-4&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/srcecde/handle-sqs-message-failure-in-batch-with-partial-batch-response-b858ad212573&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blog Post on Batch Error Reporting&lt;/a&gt; by &lt;a href=&#34;https://github.com/srcecde&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;srcecde&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;https://quotefancy.com/media/wallpaper/3840x2160/1700728-Linus-Torvalds-Quote-Talk-is-cheap-Show-me-the-code.jpg&#34;
  
      
      data-background-repeat=&#34;none&#34;
  &gt;

&lt;h1 style=&#34;display: none&#34;&gt;Code&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Blazing Fast SQS Listener</title>
      <link>https://rawsanj.dev/slides/blazing-fast-sqs-listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://rawsanj.dev/slides/blazing-fast-sqs-listener/</guid>
      <description>
&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./SQS_EKS_ECS.svg&#34;
  
      
      data-background-repeat=&#34;none&#34;
  
      
      data-background-size=&#34;1500px&#34;
  &gt;

&lt;h1 style=&#34;color: #114a5b !important;&#34; id=&#34;bz&#34;&gt;Blazing Fast&lt;/h1&gt;
&lt;h2 style=&#34;color: #114a5b !important;&#34; id=&#34;cf&#34;&gt;Cost Effective&lt;/h2&gt;
&lt;h2 style=&#34;color: #114a5b !important;&#34; id=&#34;res&#34;&gt;&amp; Resilient&lt;/h2&gt;
&lt;h1 style=&#34;color: #114a5b !important;&#34; id=&#34;lis&#34;&gt;AWS SQS Listener&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Hi there, I&amp;rsquo;m Sanjay ð!&lt;/p&gt;
&lt;a href=&#34;https://www.linkedin.com/in/rawsanj&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;LinkedIn Badge&#34; src=&#34;https://img.shields.io/badge/-/in/rawsanj-0A66C2?style=for-the-badge&amp;logo=Linkedin&amp;logoColor=white&amp;link=https://www.linkedin.com/in/rawsanj&#34; /&gt;
&lt;/a&gt;
&lt;a href=&#34;https://rawsanj.dev&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;Website Badge&#34; src=&#34;https://img.shields.io/badge/-rawsanj.dev-4CAF50?style=for-the-badge&amp;logo=curl&amp;logoColor=white&amp;link=https://rawsanj.dev&#34; /&gt;
&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/Raw_Sanj&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;Twitter Badge&#34; src=&#34;https://img.shields.io/static/v1?label=&amp;message=@Raw_Sanj&amp;color=E8EAEC&amp;style=for-the-badge&amp;logo=Twitter&amp;logoColor=1DA1F2&amp;link=https://twitter.com/Raw_Sanj&#34;/&gt;
&lt;/a&gt;
&lt;a href=&#34;https://github.com/RawSanj&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;Github Badge&#34; src=&#34;https://img.shields.io/badge/-/RawSanj-181717?style=for-the-badge&amp;logo=Github&amp;logoColor=white&amp;link=https://github.com/RawSanj&#34; /&gt;
&lt;/a&gt;
&lt;a href=&#34;https://stackoverflow.com/users/5702727/sanjay-rawat?tab=profile&#34; target=&#34;_blank&#34;&gt;
&lt;img alt=&#34;Stack Overflow&#34; src=&#34;https://img.shields.io/badge/Stack%20Overflow-F58025?style=for-the-badge&amp;logo=Stack%20Overflow&amp;logoColor=white&amp;link=https://stackoverflow.com/users/5702727/sanjay-rawat?tab=profile&#34; /&gt;
&lt;/a&gt;
&lt;h3 id=&#34;about-me&#34;&gt;About me&lt;/h3&gt;
&lt;ul style=&#34;font-size: 22px&#34;&gt;
  &lt;li&gt;ð­ &lt;strong&gt;Working:&lt;/strong&gt; Cloud Developer working on Reactive Spring Boot, Kafka, Cassandra, Microservices, AWS.&lt;/li&gt;
  &lt;li&gt;ð¥ï¸ &lt;strong&gt;Interests:&lt;/strong&gt; I love building cool software and systems using Spring Boot, Kotlin and Go&lt;/li&gt;
  &lt;li&gt;ð± &lt;strong&gt;Learning:&lt;/strong&gt; Go | Scala | Design Patterns &lt;/li&gt;
  &lt;li&gt;ð¬ &lt;strong&gt;Ask me about:&lt;/strong&gt; Java | Reactive Spring | AWS&lt;/li&gt;
  &lt;li&gt;ð§âð¤âð§ &lt;strong&gt;Collaboration:&lt;/strong&gt; I&#39;m looking to collaborate on several projects over here, please check out my GitHub repos&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h4 id=&#34;languages-frameworks-and-platforms&#34;&gt;Languages, Frameworks and Platforms&lt;/h4&gt;
&lt;img alt=&#34;Java&#34; src=&#34;https://img.shields.io/badge/Java-f8981d?style=for-the-badge&amp;logo=openjdk&amp;logoColor=5382a1&#34; /&gt;
&lt;img alt=&#34;Spring&#34; src=&#34;https://img.shields.io/badge/Spring-6DB33F?style=for-the-badge&amp;logo=spring&amp;logoColor=white&#34; /&gt;
&lt;img alt=&#34;Kotlin&#34; src=&#34;https://img.shields.io/badge/Kotlin-4d7ddd?&amp;style=for-the-badge&amp;logo=kotlin&amp;logoColor=&#34; /&gt;
&lt;img alt=&#34;Project Reactor&#34; src=&#34;https://img.shields.io/badge/Project_Reactor-6db33f?style=for-the-badge&amp;logo=ReactiveX&amp;logoColor=white&#34; /&gt;
&lt;img alt=&#34;Kafka&#34; src=&#34;https://img.shields.io/badge/-Kafka-727272?style=for-the-badge&amp;logo=apachekafka&amp;logoColor&#34; /&gt;
&lt;img alt=&#34;Cassandra&#34; src=&#34;https://img.shields.io/badge/Cassandra-1287B1?style=for-the-badge&amp;logo=apache%20cassandra&amp;logoColor=d4effc&#34; /&gt;
&lt;img alt=&#34;AWS&#34; src=&#34;https://img.shields.io/badge/AWS-232F3E?style=for-the-badge&amp;logo=amazon-aws&amp;logoColor=ff9a00&#34; /&gt;
&lt;img alt=&#34;Kubernetes&#34; src=&#34;https://img.shields.io/badge/kubernetes-%23326ce5.svg?style=for-the-badge&amp;logo=kubernetes&amp;logoColor=white&#34; /&gt;
&lt;hr&gt;
&lt;h3 id=&#34;what-is-aws-sqs&#34;&gt;What is AWS SQS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SQS offers a Secure, Durable, and Highly Available Hosted Queue&lt;/li&gt;
&lt;li&gt;Used to integrate and decouple distributed software systems and components&lt;/li&gt;
&lt;li&gt;Standard queues support &lt;a href=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/standard-queues.html#standard-queues-at-least-once-delivery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;at-least-once&lt;/a&gt; message delivery, and FIFO queues support &lt;a href=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;exactly-once&lt;/a&gt; message processing and &lt;a href=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;high-throughput&lt;/a&gt; mode&lt;/li&gt;
&lt;li&gt;Offers &lt;a href=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dead Letter Queues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;sqs-concepts-wrt-lambda&#34;&gt;SQS Concepts w.r.t Lambda&lt;/h3&gt;
&lt;ul style=&#34;font-size: 30px&#34;&gt;
  &lt;li&gt;&lt;u&gt;Queue Types&lt;/u&gt;: Standard and FIFO&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Visibility timeout&lt;/u&gt;: wait time after which message is visible again if not deleted after processing&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;In-Flight messages&lt;/u&gt;: messages that are received by the consumer but not deleted&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Message retention period&lt;/u&gt;: 1 minute to 14 days (defaults to 4 days)&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Delivery delay&lt;/u&gt;: 0 seconds to 15 minutes&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;SQS Event Source Mapping&lt;/u&gt;: Lambda Service reads items from a SQS &amp;amp; invokes Lambda Function&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Enable trigger&lt;/u&gt;: Enable or disable SQS-Lambda Integration&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Batch size&lt;/u&gt;: number of records to send to the function in each batch. Standard: 10,000(max). FIFO: 10(max)&lt;/li&gt;
  &lt;li&gt;&lt;u&gt;Batch window&lt;/u&gt;: wait time (in second) to gather records before invoking the function, applicable for Standard&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;message-lifecycle&#34;&gt;Message Lifecycle&lt;/h3&gt;
&lt;img src=&#34;https://docs.aws.amazon.com/images/AWSSimpleQueueService/latest/SQSDeveloperGuide/images/sqs-message-lifecycle-diagram.png&#34; alt=&#34;sqs-message-lifecycle&#34; height=&#34;70%&#34;/&gt;
&lt;hr&gt;
&lt;h3 id=&#34;sqs-visibility-timeout&#34;&gt;SQS Visibility Timeout&lt;/h3&gt;
&lt;img src=&#34;https://docs.aws.amazon.com/images/AWSSimpleQueueService/latest/SQSDeveloperGuide/images/sqs-visibility-timeout-diagram.png&#34; alt=&#34;SQS Visibility Timeout&#34; height=&#34;50%&#34; width=&#34;50%&#34;/&gt;
&lt;ul style=&#34;font-size: 25px&#34;&gt;
  &lt;li&gt;To avoid message loss, it&#39;s consumers responsibility to delete the message after processing&lt;/li&gt;
  &lt;li&gt;Message remains in queue after it is received, but SQS sets a visibility timeout to prevent other consumer from processing same message again&lt;/li&gt;
  &lt;li&gt;Default visibility timeout is 30 seconds. Can be set between 0 seconds to 12 hours&lt;/li&gt;
  &lt;li&gt;Can be set a Queue level or dynamically changed per message&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Caution&lt;/b&gt;: When using FIFO make sure to use Message GroupId which provides high distribution to avoid blocking processing due to error&lt;/li&gt;
&lt;/ul&gt;
&lt;ul style=&#34;font-size: 20px&#34;&gt;
  &lt;strong style=&#34;font-size: 20px&#34;&gt;Note: &lt;/strong&gt;
  &lt;li&gt;For Standard queues, the visibility timeout isn&#39;t a guarantee against receiving a message twice. &lt;/li&gt;
  &lt;li&gt;FIFO queues allow the producer or consumer to attempt multiple retries: producers can retry send using deduplicationId and consumers doesn&#39;t receive messages for same message groupId unless deleted or timed-out&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;lambda-scaling&#34;&gt;Lambda Scaling&lt;/h3&gt;
&lt;ul style=&#34;font-size: 25px&#34;&gt;
  &lt;li&gt;&lt;b&gt;Standard Queues&lt;/b&gt;: Lambda uses &lt;a href=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-short-and-long-polling.html&#34; target=&#34;_blank&#34;&gt;long polling&lt;/a&gt; &amp; reads up to 5 batches to invoke your function.&lt;/li&gt;
  &lt;li&gt;Lambda increases the number of processes that reads batches by up to 60 more instances per minute. The max no. of batches that an Event Source Mapping can process simultaneously is 1,000.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;FIFO queues&lt;/b&gt;: Lambda sends messages to your function in the order that it receives them and ensures that messages in the same group are delivered to Lambda in order.&lt;/li&gt;
  &lt;li&gt;Lambda sorts the messages into groups and sends only one batch at a time for a group.&lt;/li&gt;
  &lt;li&gt;Your function can scale in concurrency to the number of active message groups.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;faster-polling-scale-up-for-aws-lambdahttpsawsamazoncomblogscomputeintroducing-faster-polling-scale-up-for-aws-lambda-functions-configured-with-amazon-sqs&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/compute/introducing-faster-polling-scale-up-for-aws-lambda-functions-configured-with-amazon-sqs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Faster polling scale-up for AWS Lambda&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h3 id=&#34;lambda-scaling-1&#34;&gt;Lambda Scaling&lt;/h3&gt;
&lt;p&gt;Diagram here&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;sqs-message-event-in-lambda-function---standard&#34;&gt;SQS Message Event in Lambda Function - Standard&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;Records&amp;quot;: [
    {
      &amp;quot;messageId&amp;quot;: &amp;quot;059f36b4-87a3-44ab-83d2-661975830a7d&amp;quot;,
      &amp;quot;receiptHandle&amp;quot;: &amp;quot;AQEBwJnKyrHigUMZj6rYigCgxlaS3SLy0a...&amp;quot;,
      &amp;quot;body&amp;quot;: &amp;quot;Test message.&amp;quot;,
      &amp;quot;attributes&amp;quot;: {
        &amp;quot;ApproximateReceiveCount&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;SentTimestamp&amp;quot;: &amp;quot;1545082649183&amp;quot;,
        &amp;quot;SenderId&amp;quot;: &amp;quot;AIDAIENQZJOLO23YVJ4VO&amp;quot;,
        &amp;quot;ApproximateFirstReceiveTimestamp&amp;quot;: &amp;quot;1545082649185&amp;quot;
      },
      &amp;quot;messageAttributes&amp;quot;: {},
      &amp;quot;md5OfBody&amp;quot;: &amp;quot;e4e68fb7bd0e697a0ae8f1bb342846b3&amp;quot;,
      &amp;quot;eventSource&amp;quot;: &amp;quot;aws:sqs&amp;quot;,
      &amp;quot;eventSourceARN&amp;quot;: &amp;quot;arn:aws:sqs:us-east-2:123456789012:my-queue&amp;quot;,
      &amp;quot;awsRegion&amp;quot;: &amp;quot;us-east-2&amp;quot;
    },
    ...
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;sqs-message-event-in-lambda-function---fifo&#34;&gt;SQS Message Event in Lambda Function - FIFO&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;Records&amp;quot;: [
    {
      &amp;quot;messageId&amp;quot;: &amp;quot;11d6ee51-4cc7-4302-9e22-7cd8afdaadf5&amp;quot;,
      &amp;quot;receiptHandle&amp;quot;: &amp;quot;AQEBBX8nesZEXmkhsmZeyIE8iQAMig7qw...&amp;quot;,
      &amp;quot;body&amp;quot;: &amp;quot;Test message.&amp;quot;,
      &amp;quot;attributes&amp;quot;: {
        &amp;quot;ApproximateReceiveCount&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;SentTimestamp&amp;quot;: &amp;quot;1573251510774&amp;quot;,
        &amp;quot;SequenceNumber&amp;quot;: &amp;quot;18849496460467696128&amp;quot;,
        &amp;quot;MessageGroupId&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;SenderId&amp;quot;: &amp;quot;AIDAIO23YVJENQZJOL4VO&amp;quot;,
        &amp;quot;MessageDeduplicationId&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;ApproximateFirstReceiveTimestamp&amp;quot;: &amp;quot;1573251510774&amp;quot;
      },
      &amp;quot;messageAttributes&amp;quot;: {},
      &amp;quot;md5OfBody&amp;quot;: &amp;quot;e4e68fb7bd0e697a0ae8f1bb342846b3&amp;quot;,
      &amp;quot;eventSource&amp;quot;: &amp;quot;aws:sqs&amp;quot;,
      &amp;quot;eventSourceARN&amp;quot;: &amp;quot;arn:aws:sqs:us-east-2:123456789012:fifo.fifo&amp;quot;,
      &amp;quot;awsRegion&amp;quot;: &amp;quot;us-east-2&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;https://quotefancy.com/media/wallpaper/3840x2160/1700728-Linus-Torvalds-Quote-Talk-is-cheap-Show-me-the-code.jpg&#34;
  
      
      data-background-repeat=&#34;none&#34;
  &gt;

&lt;h1 style=&#34;display: none&#34;&gt;Code&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
</description>
    </item>
    
  </channel>
</rss>
