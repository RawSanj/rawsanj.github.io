<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java | Coding Cloud</title>
    <link>https://rawsanj.dev/tag/java/</link>
      <atom:link href="https://rawsanj.dev/tag/java/index.xml" rel="self" type="application/rss+xml" />
    <description>java</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2022. Sanjay Rawat</copyright><lastBuildDate>Sat, 04 May 2019 17:49:33 +0000</lastBuildDate>
    <image>
      <url>https://rawsanj.dev/media/icon_hu40be7a442f4132e79fbcdc152b49bfa5_12137_512x512_fill_lanczos_center_3.png</url>
      <title>java</title>
      <link>https://rawsanj.dev/tag/java/</link>
    </image>
    
    <item>
      <title>Aws Lambda Filter Chain</title>
      <link>https://rawsanj.dev/project/aws-lambda-filter-chain/</link>
      <pubDate>Sat, 04 May 2019 17:49:33 +0000</pubDate>
      <guid>https://rawsanj.dev/project/aws-lambda-filter-chain/</guid>
      <description>&lt;p&gt;AWS Lambda Filter Chain provides a way to add filters similar to &lt;code&gt;javax.servlet.Filter&lt;/code&gt; to the AWS Lambda Functions handling requests from API Gateway&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;h4 id=&#34;clone-the-github-repository&#34;&gt;Clone the Github repository&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/aws-lambda-filter-chain.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;build-library-and-sample-api-gateway-lambda-function&#34;&gt;Build library and sample API Gateway Lambda Function&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ./build.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;build--run-sample-api-gateway-lambda-function-locally&#34;&gt;Build &amp;amp; Run sample API Gateway Lambda Function locally&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ./build.sh runLocally
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;
Install &lt;a href=&#34;https://github.com/awslabs/aws-sam-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS SAM CLI&lt;/a&gt; and &lt;a href=&#34;https://hub.docker.com/search/?type=edition&amp;amp;offering=community&amp;amp;operating_system=linux%2Cwindows&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; to run aws lambda functions locally.&lt;/p&gt;
&lt;h4 id=&#34;test-the-sample-lambda-function-locally&#34;&gt;Test the sample lambda function locally&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ // Get All User
$ curl  http://127.0.0.1:3000/user
$ // Post User
$ curl -X POST http://localhost:3000/user -H &#39;Accept: application/json&#39; -H &#39;Content-Type: application/json&#39; -d &#39;{&amp;quot;userName&amp;quot;: &amp;quot;john&amp;quot;,&amp;quot;fullName&amp;quot;: &amp;quot;John Doe&amp;quot;,&amp;quot;age&amp;quot;: 29,&amp;quot;company&amp;quot;: &amp;quot;Example&amp;quot;}&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spring Redis Websocket</title>
      <link>https://rawsanj.dev/project/spring-redis-websocket/</link>
      <pubDate>Sun, 17 Mar 2019 19:39:30 +0000</pubDate>
      <guid>https://rawsanj.dev/project/spring-redis-websocket/</guid>
      <description>&lt;h2 id=&#34;multi-instance-reactive-chat-app-using-spring-boot-webflux-and-redis-pubsub&#34;&gt;Multi-instance Reactive Chat App using Spring Boot WebFlux and Redis Pub/Sub&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Scalable Java 11 Spring Boot WebFlux Chat Application to demonstrate use of Reactive Redis &lt;a href=&#34;https://redis.io/topics/pubsub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pub/Sub&lt;/a&gt; using
Reactive &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-websockethandler&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebSocket Handler&lt;/a&gt;, without using any external Message Broker like RabbitMQ to sync messages between different
instances.&lt;/p&gt;
&lt;p&gt;Both JVM based application and &lt;a href=&#34;https://www.graalvm.org/reference-manual/native-image&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Graal Native Image&lt;/a&gt; is supported.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://heroku.com/deploy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.png#floatleft&#34; alt=&#34;Deploy to Heroku&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The older non-reactive servlet based spring-redis-websocket application can be found in below links:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RawSanj/spring-redis-websocket/tree/spring-boot-web-2.3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring-Boot 2.3: Java-11 version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RawSanj/spring-redis-websocket/tree/spring-boot-1.5.x&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring-Boot 1.5: Java-8 version&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The reactive spring-boot 2.4.6 based spring-redis-websocket application can be found in below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RawSanj/spring-redis-websocket/tree/spring-boot-webflux-graal-native-2.4.6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring-Boot 2.4.6: Java-11 Reactive JVM &amp;amp; Graal Native version&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;deploy-to-play-with-docker&#34;&gt;Deploy to Play-with-Docker&lt;/h3&gt;
&lt;p&gt;Ctrl + Click this button to deploy multiple instances of the spring-redis-websocket load balanced by NGINX:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://labs.play-with-docker.com/?stack=https://raw.githubusercontent.com/RawSanj/spring-redis-websocket/master/src/main/docker/docker-compose.yml#&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;deploy-to-pwd.png#floatleft&#34; alt=&#34;Deploy to PWD&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;installation-and-configuration&#34;&gt;Installation and Configuration&lt;/h3&gt;
&lt;h5 id=&#34;pre-requisite-for-java-image&#34;&gt;Pre-requisite for Java Image:&lt;/h5&gt;
&lt;p&gt;Install and run &lt;a href=&#34;https://redis.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis&lt;/a&gt; locally or on Docker.&lt;/p&gt;
&lt;p&gt;To run Redis in Docker:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run -d -p 6379:6379 -e REDIS_PASSWORD=SuperSecretRedisPassword bitnami/redis:6.0.9
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;pre-requisite-for-graal-native-image&#34;&gt;Pre-requisite for Graal Native Image:&lt;/h5&gt;
&lt;p&gt;This application uses Spring Data Redis APIs which doesn&amp;rsquo;t have default Graal hints/config and graal-native image fails to run with errors.&lt;/p&gt;
&lt;p&gt;Hence, this application is configured to use GraalVM native image tracing agent allows intercepting reflection, resources or proxy usage on the JVM by running simple Integration Tests which requires Redis.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To run integration test which uses &lt;a href=&#34;https://www.testcontainers.org/supported_docker_environment&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis TestContainers&lt;/a&gt; so &lt;a href=&#34;https://www.docker.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; should be configured properly to run &lt;a href=&#34;https://www.testcontainers.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Testcontainers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You also need to install &lt;a href=&#34;https://github.com/graalvm/graalvm-ce-builds/releases/tag/vm-21.0.0.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GraalVM JDK&lt;/a&gt; and &lt;a href=&#34;https://www.graalvm.org/reference-manual/native-image&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;native-image&lt;/a&gt; component:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sdk install java 21.1.0.r11-grl       # Using [SDKMAN](https://sdkman.io/jdks) install GraalVM distribution of JDK

$ gu install native-image 		# Then install [native-image](https://www.graalvm.org/reference-manual/native-image) component
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;clone-repo&#34;&gt;Clone repo:&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/spring-redis-websocket.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;build-and-run-the-application&#34;&gt;Build and Run the application:&lt;/h4&gt;
&lt;p&gt;Build and run the &lt;strong&gt;spring-redis-websocket&lt;/strong&gt; application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd spring-redis-websocket

$ mvn clean package

$ mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;build-graal-native-image-of-the-application&#34;&gt;Build Graal Native Image of the application:&lt;/h4&gt;
&lt;p&gt;Build and run the &lt;strong&gt;spring-redis-websocket&lt;/strong&gt; native image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd spring-redis-websocket

$ mvn -Pnative clean package -DskipNativeImage=false

$ target/spring-redis-websocket # run the executable binary
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Above steps are applicable for Linux only and creates linux executable binary. To create Windows executable there are few additional set-ups required, follow this &lt;a href=&#34;https://www.graalvm.org/docs/getting-started/windows&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Steps&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;run-in-docker&#34;&gt;Run in Docker&lt;/h3&gt;
&lt;h4 id=&#34;build-and-run-the-spring-redis-websocket-locally-in-docker&#34;&gt;Build and run the &lt;em&gt;spring-redis-websocket&lt;/em&gt; locally in Docker:&lt;/h4&gt;
&lt;p&gt;Build the JAR file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn clean package
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build Docker image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn clean spring-boot:build-image
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build Graal Native Docker image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn -Pnative clean spring-boot:build-image
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run docker image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run -d -p 8080:8080 rawsanj/spring-redis-websocket:2.5.2-webflux # JVM based Docker Image

$ docker run -d -p 8080:8080 rawsanj/spring-redis-websocket:2.5.2-native  # Graal Native Image based Docker Image
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;run-multiple-instances-using-docker-compose-locally&#34;&gt;Run multiple instances using docker-compose locally&lt;/h4&gt;
&lt;p&gt;Run multiple instances of &lt;em&gt;spring-redis-websocket&lt;/em&gt; locally load balanced via Ngnix connected to redis container in
Docker:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd src/main/docker
$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;or-try-play-with-docker-to-quickly-setup-docker-and-run-in-browser&#34;&gt;Or try &lt;a href=&#34;https://labs.play-with-docker.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Play with Docker&lt;/a&gt; to quickly setup Docker and run in browser:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Click Create Instance to quickly setup Docker host.&lt;/li&gt;
&lt;li&gt;Install git by running:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ apk add git --no-cache
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Clone the repository:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/spring-redis-websocket.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Run multiple instances of &lt;em&gt;spring-redis-websocket&lt;/em&gt;:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd spring-redis-websocket/src/main/docker
$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;run-in-kubernetes&#34;&gt;Run in Kubernetes&lt;/h3&gt;
&lt;h4 id=&#34;assuming-you-have-a-kubernetes-cluster-up-and-running-locally&#34;&gt;Assuming you have a Kubernetes Cluster up and running locally:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubectl apply -f src/main/k8s
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;or-try-play-with-kubernetes-to-quickly-setup-a-k8s-cluster&#34;&gt;Or try &lt;a href=&#34;https://labs.play-with-k8s.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Play with Kubernetes&lt;/a&gt; to quickly setup a K8S cluster:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Follow the instructions to create Kuberenetes cluster.&lt;/li&gt;
&lt;li&gt;Install git by running:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ yum install git -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Clone the repository:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/RawSanj/spring-redis-websocket.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Run multiple instances of &lt;em&gt;spring-redis-websocket&lt;/em&gt; load balanced by native Kubernetes Service. All instances
connected to a single &lt;a href=&#34;https://redis.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis&lt;/a&gt; pod.
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd spring-redis-websocket
$ kubectl apply -f src/main/k8s
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;tech&#34;&gt;Tech&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;spring-redis-websocket&lt;/strong&gt; uses a number of open source projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://projects.spring.io/spring-boot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Boot&lt;/a&gt; - An opinionated framework for building production-ready Spring applications. It favors convention over
configuration and is designed to get you up and running as quickly as possible.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projects.spring.io/spring-data-redis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Data Redis&lt;/a&gt; - Spring Data Redis provides easy configuration and access to Redis from Spring applications.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.graalvm.org/reference-manual/native-image&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Graal Native Image&lt;/a&gt; - Native Image is a technology to ahead-of-time compile Java code to a standalone executable,
called a native image.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://redis.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis&lt;/a&gt; - Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and
message broker.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.testcontainers.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Testcontainers&lt;/a&gt; - Testcontainers is a Java library that supports JUnit tests, providing lightweight, throwaway
instances of common databases or anything else that can run in a Docker container.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getbootstrap.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bootstrap&lt;/a&gt; - Bootstrap is an open source toolkit for developing with HTML, CSS, and JS. Custom Bootstrap theme
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bootswatch.com/sketchy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bootswatch Sketch&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; - Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NGINX&lt;/a&gt; - NGINX is High Performance Load Balancer, Web Server, &amp;amp; Reverse Proxy.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; - Kubernetes is an open-source system for automating deployment, scaling, and management of containerized
applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Apache License 2.0&lt;/p&gt;
&lt;p&gt;Copyright (c) 2022 Sanjay Rawat&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AWS Lambda Deep Dive</title>
      <link>https://rawsanj.dev/slides/aws-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://rawsanj.dev/slides/aws-lambda/</guid>
      <description>
&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Amazon_Lambda_architecture_logo.svg/1024px-Amazon_Lambda_architecture_logo.svg.png&#34;
  
      
      data-background-repeat=&#34;repeat&#34;
  
      
      data-background-size=&#34;1024px&#34;
  &gt;

&lt;h1 id=&#34;aws-lambda&#34;&gt;AWS Lambda&lt;/h1&gt;
&lt;h1 id=&#34;deep-dive&#34;&gt;Deep Dive&lt;/h1&gt;
&lt;h3 id=&#34;documentationhttpsdocsawsamazoncomlambdalatestdgwelcomehtml&#34;&gt;&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/welcome.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h3 id=&#34;what-is-aws-lambda-function&#34;&gt;What is AWS Lambda Function&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A Compute Service to run code without Provisioning or Managing Servers&lt;/li&gt;
&lt;li&gt;Uses Containerization tech called &lt;a href=&#34;https://firecracker-microvm.github.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Firecracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handles Server &amp;amp; OS Maintenance, Provisioning, Auto-Scaling, Logging&lt;/li&gt;
&lt;li&gt;Code in one of the Languages supported by &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lambda Runtimes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;lambda-concepts&#34;&gt;Lambda Concepts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;Function&lt;/u&gt;: a resource invoked to run your code&lt;/li&gt;
&lt;li&gt;&lt;u&gt;Trigger&lt;/u&gt;: a resource/config that invokes a Lambda&lt;/li&gt;
&lt;li&gt;&lt;u&gt;Event&lt;/u&gt;: a JSON-formatted data for a Lambda function to process&lt;/li&gt;
&lt;li&gt;&lt;u&gt;Event Source Mapping&lt;/u&gt;: a resource that reads items from a stream/queue &amp;amp; invokes a function&lt;/li&gt;
&lt;li&gt;&lt;u&gt;Execution Env&lt;/u&gt;: provides a secure and isolated Runtime Env for your Lambda function&lt;/li&gt;
&lt;li&gt;&lt;u&gt;Runtime&lt;/u&gt;: provides a lang-specific Env that runs in an Execution Env&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;what-is-lambda-runtimes&#34;&gt;What is Lambda Runtimes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Runtime provides a lang-specific env that runs in an execution env&lt;/li&gt;
&lt;li&gt;It relays invocation Events, Context, &amp;amp; Responses between Lambda &amp;amp; the Function&lt;/li&gt;
&lt;li&gt;Use AWS provided Lambda Runtimes or Build your own by implementing &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Runtime API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;execution-environment--runtime&#34;&gt;Execution Environment &amp;amp; Runtime&lt;/h3&gt;
&lt;img src=&#34;https://docs.aws.amazon.com/images/lambda/latest/dg/images/telemetry-api-concept-diagram.png&#34; alt=&#34;Lambda Execution Environment&#34; width=&#34;80%&#34;/&gt;
&lt;img src=&#34;https://docs.aws.amazon.com/images/lambda/latest/dg/images/Overview-Invoke-with-Error.png&#34; alt=&#34;Lambda Execution Environment&#34; width=&#34;120%&#34;/&gt;
&lt;hr&gt;
&lt;h3 id=&#34;supported-lambda-runtimes&#34;&gt;Supported Lambda Runtimes&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Node.js&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;v18, v16, v14 &amp;amp; v12*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Python&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;v3.9, v3.8, v3.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Java&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;v8, v11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;C#&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;.NET v5, v6   &amp;amp; .NET Core v3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Go&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;v1.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Ruby&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;v2.7*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Custom Runtime&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- Based on Amazon Linux&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/micronaut-projects/micronaut-aws/blob/master/function-aws-custom-runtime/src/main/java/io/micronaut/function/aws/runtime/AbstractMicronautLambdaRuntime.java#L347&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Micronaut Custom Runtime Implementation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;lambda-function-java&#34;&gt;Lambda Function Java&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MsgHandler implements RequestHandler&amp;lt;String, String&amp;gt; {
    public String handleRequest(String input, Context ctx) {
        context.getLogger().log(&amp;quot;Input: &amp;quot; + input);
        return &amp;quot;Hello World - &amp;quot; + input;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class StreamHandler implements RequestStreamHandler {
    public void handleRequest(InputStream is, OutputStream os, Context ctx) {
        String input = IOUtils.toString(is, &amp;quot;UTF-8&amp;quot;);
        os.write((&amp;quot;Hello World - &amp;quot; + input).getBytes());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class NoInterfaceHandler {
    public String customHandle(String input, Context context) {
        context.getLogger().log(&amp;quot;Input: &amp;quot; + input);
        return &amp;quot;Hello World - &amp;quot; + input;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Automatically manages the underlying Compute Resources&lt;/li&gt;
&lt;li&gt;Concurrency and Scaling controls&lt;/li&gt;
&lt;li&gt;Pay Per Request Execution is millis&lt;/li&gt;
&lt;li&gt;Multiple Event Sources: API-GW, SQS, S3, DynamoDB, etc.&lt;/li&gt;
&lt;li&gt;Functions defined as Container Images&lt;/li&gt;
&lt;li&gt;Lambda Extensions&lt;/li&gt;
&lt;li&gt;Execute inside Private Subnets inside a VPC&lt;/li&gt;
&lt;li&gt;File Systems Access + EFS&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;limitationshttpsdocsawsamazoncomlambdalatestdggettingstarted-limitshtml&#34;&gt;&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Limitations&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Memory: 128 MB to 10,240 MB&lt;/li&gt;
&lt;li&gt;No Direct Way to assign CPU: 1,769 MB memory is equivalent of one vCPU&lt;/li&gt;
&lt;li&gt;Function Timeouts: 15 minutes&lt;/li&gt;
&lt;li&gt;Invocation Payload: 6 MB (sync) &amp;amp; 256 KB (async)&lt;/li&gt;
&lt;li&gt;File descriptors: 1024&lt;/li&gt;
&lt;li&gt;Execution processes/threads: 1024&lt;/li&gt;
&lt;li&gt;No Async Processing Allowed: Lambda Instance Freezes once invocation is completed&lt;/li&gt;
&lt;li&gt;1 Lambda Instance serves only 1 request at time&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;other-compute-options&#34;&gt;Other Compute Options&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Services&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Comparison with Lambda&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;AWS EC2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Not Serverless, More RAM/CPU/Storage, Always ON&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;AWS EKS&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Managed Container Platform on EC2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Fargate&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Serverless Container Platform on EC2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Beanstalk&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AWS Container based PaaS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;GCP Cloud RUN&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Based on &lt;a href=&#34;https://knative.dev/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OSS Knative&lt;/a&gt; - Charged for Runtime only&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;Â &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/FortAwesome/Font-Awesome/6.x/svgs/brands/github.svg&#34; width=&#34;40&#34; height=&#34;40&#34; alt=&#34;Github Icon&#34;/&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a target=&#34;_blank&#34;  href=&#34;http://github.com/rawsanj&#34;&gt;@RawSanj&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/FortAwesome/Font-Awesome/6.x/svgs/brands/twitter.svg&#34; width=&#34;40&#34; height=&#34;40&#34; alt=&#34;Twitter Icon&#34;/&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a target=&#34;_blank&#34;  href=&#34;https://twitter.com/raw_sanj&#34;&gt;@Raw_Sanj&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/FortAwesome/Font-Awesome/6.x/svgs/brands/stack-overflow.svg&#34; width=&#34;40&#34; height=&#34;40&#34; alt=&#34;StackOverflow Icon&#34;/&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a target=&#34;_blank&#34; style=&#34;color:#ffbc5a;&#34; href=&#34;https://stackoverflow.com/users/5702727/sanjay-rawat?tab=profile&#34;&gt;stack&lt;b&gt;overflow&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>
